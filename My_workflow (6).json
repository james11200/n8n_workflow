{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.documentDefaultDataLoader",
      "typeVersion": 1,
      "position": [
        -640,
        1080
      ],
      "id": "e24f735b-9dee-4697-b843-6aa90992bee5",
      "name": "Default Data Loader2"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.textSplitterCharacterTextSplitter",
      "typeVersion": 1,
      "position": [
        -540,
        1200
      ],
      "id": "e8d699da-af1d-44ca-8de3-51ecfd25b1a3",
      "name": "Character Text Splitter"
    },
    {
      "parameters": {
        "mode": "load",
        "pineconeIndex": {
          "__rl": true,
          "value": "open-embed",
          "mode": "list",
          "cachedResultName": "open-embed"
        },
        "prompt": "={{ $json[\"品名\"] }} {{ $json[\"單位\"] }}",
        "topK": 1,
        "includeDocumentMetadata": false,
        "options": {
          "pineconeNamespace": "rag"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.1,
      "position": [
        -580,
        300
      ],
      "id": "1c2b7708-2bab-4a47-8cf2-8720f492c816",
      "name": "Pinecone Vector Store2",
      "executeOnce": false,
      "credentials": {
        "pineconeApi": {
          "id": "uoNvdpuSZFb6Cx5S",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "83b11db6-4221-4cf1-945c-fae8faa5483a",
              "name": "item",
              "value": "={{$json[\"品號\"] + \" \" + $json[\"品名\"] + \" \" + $json[\"單位\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1160,
        1040
      ],
      "id": "0e0eaa90-c63f-4bef-af88-3652c47ab608",
      "name": "品號,品名,單位",
      "disabled": true
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "83b11db6-4221-4cf1-945c-fae8faa5483a",
              "name": "item",
              "value": "={{ $json[\"品名\"] + \" \" + $json[\"單位\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1160,
        1200
      ],
      "id": "80b61f98-2c5e-4b49-9ce6-ff1c4b4ad587",
      "name": "品名,單位"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.embeddingsOpenAi",
      "typeVersion": 1.2,
      "position": [
        -720,
        660
      ],
      "id": "3cf606d6-406a-4f17-a8b8-13ff4b6bf482",
      "name": "Embeddings OpenAI",
      "credentials": {
        "openAiApi": {
          "id": "ZP5vKp9O8kvLOyxz",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1W56Q7AwRGwX6SL_khgcTFAXi41Yw-y6jx7J4mwaFIVk",
          "mode": "id"
        },
        "sheetName": {
          "__rl": true,
          "value": 610408220,
          "mode": "list",
          "cachedResultName": "COPR222025033000000320250330000",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1W56Q7AwRGwX6SL_khgcTFAXi41Yw-y6jx7J4mwaFIVk/edit#gid=610408220"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        -1680,
        1060
      ],
      "id": "9db2af70-8b9a-432b-b035-77bd2ca7726e",
      "name": "Google Sheets product database",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "VfEhTN1vBoqFlxvl",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "upload",
        "responseMode": "responseNode",
        "options": {
          "binaryPropertyName": "data"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -2480,
        180
      ],
      "id": "58d44e8e-e10d-4072-8ba3-d0088175f15b",
      "name": "Webhook",
      "webhookId": "019c2799-0fb1-43c8-929b-0d6251d465d1"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        -2340,
        180
      ],
      "id": "3747dc4c-bf7c-4aa8-921c-c75b84f73038",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://vision.googleapis.com/v1/images:annotate",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpQueryAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"requests\": [\n    {\n      \"image\": {\n        \"content\": \"{{ $json[\"base64\"] }}\"\n      },\n      \"features\": [\n        {\n          \"type\": \"DOCUMENT_TEXT_DETECTION\"\n        }\n      ]\n    }\n  ]\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1600,
        440
      ],
      "id": "9303f7e0-6fa2-4062-a6b2-083e5c8bcdfe",
      "name": "google vision ai4",
      "credentials": {
        "httpQueryAuth": {
          "id": "H0QpFWhSd0zTONrT",
          "name": "google vision ai api key"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const buffer = await this.helpers.getBinaryDataBuffer(0, 'data0');\nconst base64 = buffer.toString('base64');\nreturn { json: { base64 } };\n"
      },
      "id": "f5b690b4-5498-43e4-8ea4-6669f4112c2f",
      "name": "base64",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1740,
        440
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "7be7fe88-1b5b-4132-80f8-2975d0f8bb86",
              "name": "text",
              "value": "廣東B/生菜葉",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1700,
        1280
      ],
      "id": "2b75e265-1c8e-4f1b-b400-0b03d5eb288a",
      "name": "test data"
    },
    {
      "parameters": {
        "jsCode": "const buffer = await this.helpers.getBinaryDataBuffer(0, 'data0');\nconst base64 = buffer.toString('base64');\nreturn { json: { base64 } };\n"
      },
      "id": "a2e89983-865a-4089-8de6-c004c422e84a",
      "name": "base",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -980,
        -220
      ]
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "836164e9-0244-4489-a1d9-bb5a60799cd8",
              "name": "單位",
              "value": "={{ $json.uniqueUnits }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1160,
        860
      ],
      "id": "afc0eef1-5e94-4505-8ba6-87824bc27123",
      "name": "單位"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "86690958-58d4-4d57-abaf-5d7529038311",
              "leftValue": "={{$binary.data0.mimeType.trim().toLowerCase()}}\n",
              "rightValue": "application/pdf",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1940,
        180
      ],
      "id": "c7bfa361-832d-4c68-bd47-6bed2b39da8f",
      "name": "Check If file is pdf"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1960,
        1060
      ],
      "id": "5d8901a8-7cbc-4fda-aa20-b0c30b52fa76",
      "name": "Setting up database"
    },
    {
      "parameters": {
        "mode": "insert",
        "pineconeIndex": {
          "__rl": true,
          "value": "open-embed",
          "mode": "list",
          "cachedResultName": "open-embed"
        },
        "embeddingBatchSize": 100,
        "options": {
          "pineconeNamespace": "rag"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStorePinecone",
      "typeVersion": 1.1,
      "position": [
        -720,
        940
      ],
      "id": "265e4cdc-e6a3-43f6-8e2c-ac0eebe97228",
      "name": "Build Pinecone Vector Store (only run on first time)",
      "executeOnce": false,
      "credentials": {
        "pineconeApi": {
          "id": "uoNvdpuSZFb6Cx5S",
          "name": "PineconeApi account"
        }
      }
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        2440,
        -20
      ],
      "id": "8f70bfb2-1c64-4bb4-8874-37960f415ed5",
      "name": "Image final output"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# n8n Python Code 節點\n\n# items 變數由 n8n 自動提供，包含前一個節點的所有輸入資料\n# 每一項 item 的結構為 {'json': {...}, 'binary': {...}（如有）}\n\n# 1. 擷取所有「單位」欄位的值\nunits = []\nfor item in items:\n    # 使用 get() 防止 key 不存在造成錯誤\n    unit = item['json'].get('單位')\n    # 只把非空值加入列表\n    if unit is not None:\n        units.append(unit)\n\n# 2. 去重\nunique_units = list(set(units))\n\n# 3. 回傳結果\n#    這裡我們把去重後的列表放在 json.uniqueUnits 裡\nreturn [\n    {\n        'json': {\n            'uniqueUnits': unique_units\n        }\n    }\n]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1380,
        920
      ],
      "id": "010923ed-133c-4abc-9161-113620ac273b",
      "name": "get 單位"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# n8n Python Code 節點\n\n# items 變數由 n8n 自動提供，包含前一個節點的所有輸入資料\n# 每一項 item 的結構為 {'json': {...}, 'binary': {...}（如有）}\n\n# 1. 擷取所有「單位」欄位的值\nunits = []\nfor item in items:\n    # 使用 get() 防止 key 不存在造成錯誤\n    unit = item['json'].get('單位')\n    # 只把非空值加入列表\n    if unit is not None:\n        units.append(unit)\n\n# 2. 去重\nunique_units = list(set(units))\n\n# 3. 回傳結果\n#    這裡我們把去重後的列表放在 json.uniqueUnits 裡\nreturn [\n    {\n        'json': {\n            'uniqueUnits': unique_units\n        }\n    }\n]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1380,
        780
      ],
      "id": "7ed8d8d7-5214-4b3e-9b89-8be031573350",
      "name": "get 品號"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "836164e9-0244-4489-a1d9-bb5a60799cd8",
              "name": "單位",
              "value": "={{ $json.uniqueUnits }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1160,
        720
      ],
      "id": "c95d3b60-399b-4d00-b531-b345654e21db",
      "name": "品號"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "output = []\n\nfor item in _input.all():\n    raw = item[\"json\"]\n    body = raw.get(\"body\", {})\n\n    name = body.get(\"name\")\n    date = body.get(\"date\")\n\n    output.append({\n        \"json\": {\n            \"name\": name,\n            \"date\": date\n        }\n    })\n\nreturn output\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1740,
        180
      ],
      "id": "7dd8c6ed-96b0-49a6-a881-238d58bcb8cc",
      "name": "Customer name&date"
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -360,
        940
      ],
      "id": "8d4b5977-6218-4c0f-b1b9-1794c9cb96ed",
      "name": "vector database init end"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# If there’s no incoming data, bail out\nif not items or len(items) == 0:\n    return []\n\n# Pull the raw OCR JSON from the first item\nocr_json = items[0][\"json\"]\n\n# Try to grab the full text block\ndesc = None\ntry:\n    desc = ocr_json[\"responses\"][0][\"textAnnotations\"][0][\"description\"]\nexcept (KeyError, IndexError, TypeError):\n    pass\n\nif not desc:\n    raise Exception(\"No textAnnotations[0].description found\")\n\n# Split into non-empty, trimmed lines\nlines = [line.strip() for line in desc.split(\"\\n\") if line.strip()]\n\n# Emit one n8n item per line\nreturn [\n    {\"json\": {\"item\": line}}\n    for line in lines\n]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1140,
        320
      ],
      "id": "81617438-9f1b-4386-b8ff-93fcbbae346d",
      "name": "Extracts OCR text"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\n# match：最短的「品名」.(空格).number.(unit)\npattern = re.compile(r\"(.+?)\\s*(\\d+(?:\\.\\d+)?)([^\\d\\s]+)\")\n\nnew_items = []\nfor item in items:\n    text = item[\"json\"].get(\"item\", \"\")\n    m = pattern.match(text)\n    if m:\n        name, qty, unit = m.groups()\n    else:\n        # fallback 全都放在品名裡面\n        name, qty, unit = text, None, None\n\n    # 寫回到 json\n    item[\"json\"][\"品名\"] = name\n    item[\"json\"][\"數量\"] = qty\n    item[\"json\"][\"單位\"] = unit\n\n    new_items.append(item)\n\nreturn new_items\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -900,
        400
      ],
      "id": "898ad666-1625-4de0-8960-9d4d2e5995f5",
      "name": "extract product fields"
    },
    {
      "parameters": {
        "sendTo": "jameschen112001@gmail.com",
        "subject": "Human check",
        "message": "=Customer input:{{ $json.original_input }}\nMatched name: {{ $json.matched_name }}\nMatch score: {{ $json.match_score }}\nQuantity: {{ $json.original_input }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        620,
        760
      ],
      "id": "d5dd2426-5bbc-4e78-800b-d926a0d60ed6",
      "name": "Send to human",
      "webhookId": "fe90d093-dcfa-4ca2-935c-e3fad628cca4",
      "credentials": {
        "gmailOAuth2": {
          "id": "JAbTYr45WxtYcIUQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "f0359ca9-ad0f-4921-92da-f59a271b8e7b",
              "leftValue": "={{ $json.match_score }}",
              "rightValue": 0.7,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        340,
        540
      ],
      "id": "2cf0321e-825d-4278-b950-4f79c0a2a6dd",
      "name": "If score less than 70% occur human confirm1"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1W56Q7AwRGwX6SL_khgcTFAXi41Yw-y6jx7J4mwaFIVk",
          "mode": "list",
          "cachedResultName": "客戶訂單資料",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1W56Q7AwRGwX6SL_khgcTFAXi41Yw-y6jx7J4mwaFIVk/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 610408220,
          "mode": "list",
          "cachedResultName": "COPR222025033000000320250330000",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1W56Q7AwRGwX6SL_khgcTFAXi41Yw-y6jx7J4mwaFIVk/edit#gid=610408220"
        },
        "filtersUI": {
          "values": [
            {
              "lookupColumn": "=品名",
              "lookupValue": "={{ $json.matched_name.split(' ')[0]  }}"
            },
            {
              "lookupColumn": "單位",
              "lookupValue": "={{ $json.matched_name.split(' ')[1]  }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.5,
      "position": [
        560,
        520
      ],
      "id": "7f15ea45-125e-4372-8546-96f4ab0d56c6",
      "name": "Google Sheets2",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "VfEhTN1vBoqFlxvl",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "check_product=[]\nseen_product=[]\n\nfor item in items:\n  data = item[\"json\"]\n  if (data.get(\"品號\"),data.get(\"單位\")) not in check_product :\n    seen_product.append(item)\n    check_product.append((data.get(\"品號\"),data.get(\"單位\")))\n\nreturn seen_product\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        740,
        520
      ],
      "id": "58e5b983-3c78-4161-854f-2b656b213b06",
      "name": "remove duplicates"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "9f4125e3-38fa-4087-9f88-37896480f56a",
              "name": "product_id",
              "value": "={{ $json[\"品號\"] }}",
              "type": "string"
            },
            {
              "id": "87010d3e-1122-4bbd-ae7d-890524d91a3c",
              "name": "matched_name",
              "value": "={{ $json[\"品名\"] }} {{ $json[\"單位\"] }}",
              "type": "string"
            },
            {
              "id": "090c47d0-e31b-4b79-880a-7114ea24c8d3",
              "name": "品名",
              "value": "={{ $json[\"品名\"] }}",
              "type": "string"
            },
            {
              "id": "dd3b1f4c-0578-4791-97e0-38dd9147ebb5",
              "name": "unit",
              "value": "={{ $json[\"單位\"] }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        940,
        520
      ],
      "id": "3a810b03-d734-4618-8f04-a99630dd4427",
      "name": "reconstruct file structure"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "98b95b58-22b8-4071-bd22-ec14947b5356",
              "name": "product_id",
              "value": "={{ $json.product_id }}",
              "type": "string"
            },
            {
              "id": "9043618d-6ec3-4183-abcc-e22d780e4267",
              "name": "matched_name",
              "value": "={{ $json.matched_name }}",
              "type": "string"
            },
            {
              "id": "1599e09f-09f8-46d4-b117-4c80229579cf",
              "name": "original_input",
              "value": "={{ $json.original_input }}",
              "type": "string"
            },
            {
              "id": "080e1f22-f2db-4600-966d-997afa64e020",
              "name": "match_score",
              "value": "={{ $json.match_score }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1160,
        480
      ],
      "id": "cd0d8195-410d-465f-9d05-1313d352fed2",
      "name": "reconstruct file structure1"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "clean_items = [item[\"json\"] for item in items]\nreturn  { \"items\": clean_items } \n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1500,
        320
      ],
      "id": "8028136a-1759-49a2-9e94-b5cad7e5cdcf",
      "name": "into items list"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "65c5e046-1ef7-4e66-a39f-065b64bd1c48",
              "leftValue": "={{ $json.status }}",
              "rightValue": "succeeded",
              "operator": {
                "type": "string",
                "operation": "notEquals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -40,
        -220
      ],
      "id": "3d79ec4f-e3e5-4d8f-a5fc-52081ffc875e",
      "name": "wait for succeeded status"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [
        -220,
        -120
      ],
      "id": "2b9b04ea-084a-4551-b69b-9521d3544cfe",
      "name": "Wait 5 sec if azure hasn't finished",
      "webhookId": "d6ce560f-00b7-4ac4-a048-3da222de9c59"
    },
    {
      "parameters": {
        "url": "={{ $node[\"Azure Post request\"].data.headers[\"operation-location\"] }}\n",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -380,
        -220
      ],
      "id": "e222556b-0518-4c11-bf42-b0d2be42de5b",
      "name": "Azure Get request1",
      "retryOnFail": true,
      "credentials": {
        "httpHeaderAuth": {
          "id": "StIo90BELBkLQZYH",
          "name": "Azure api key"
        }
      }
    },
    {
      "parameters": {
        "operation": "toJson",
        "options": {}
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        740,
        -240
      ],
      "id": "137784e6-7e3f-4a89-9bfd-4da835cd6363",
      "name": "pdf final output",
      "disabled": true
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://n8ndoc.cognitiveservices.azure.com/documentintelligence/documentModels/prebuilt-layout:analyze?api-version=2024-11-30",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "base64Source",
              "value": "={{ $json.base64 }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "fullResponse": true
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -660,
        -220
      ],
      "id": "f59c6211-fa17-4eab-9644-bf065a782593",
      "name": "Azure Post request",
      "credentials": {
        "httpQueryAuth": {
          "id": "H0QpFWhSd0zTONrT",
          "name": "google vision ai api key"
        },
        "httpHeaderAuth": {
          "id": "StIo90BELBkLQZYH",
          "name": "Azure api key"
        }
      }
    },
    {
      "parameters": {
        "sendTo": "jameschen112001@gmail.com",
        "subject": "Human check",
        "message": "=No input file",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1980,
        340
      ],
      "id": "db33d163-e91c-4f1f-b59b-a7896a27f07c",
      "name": "Send empty file message to human",
      "webhookId": "fe90d093-dcfa-4ca2-935c-e3fad628cca4",
      "credentials": {
        "gmailOAuth2": {
          "id": "JAbTYr45WxtYcIUQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "df39fb6a-0fa9-4d69-b404-f4081853f9c9",
              "leftValue": "={{ Object.keys($binary || {}).length > 0 }}",
              "rightValue": 0,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2160,
        180
      ],
      "id": "c13a102d-f91c-445b-93eb-711ce371b46e",
      "name": "check attached file or not"
    },
    {
      "parameters": {
        "sendTo": "jameschen112001@gmail.com",
        "subject": "Human check",
        "message": "=Image content is empty",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        -1140,
        500
      ],
      "id": "de4e6538-c596-4509-a19b-14051a823424",
      "name": "Send empty content message to human",
      "webhookId": "fe90d093-dcfa-4ca2-935c-e3fad628cca4",
      "credentials": {
        "gmailOAuth2": {
          "id": "JAbTYr45WxtYcIUQ",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "a1317f4b-ad08-4fde-b5ee-ae04fdd4f892",
              "leftValue": "={{ $json.responses[0] }}",
              "rightValue": "={{ $json.responses }}",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1400,
        440
      ],
      "id": "4727cbb9-882d-418c-95f2-9613fc99865c",
      "name": "If image content is not empty"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        640,
        -80
      ],
      "id": "dd4ce93e-df1f-433b-8bba-a88b7c427811",
      "name": "Merge customer and items"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1700,
        200
      ],
      "id": "b47f778d-9f87-4438-9e7d-3d9c9d4cc71d",
      "name": "Merge customer and items1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "5c14472c-7f69-44dc-895c-781d938b79ee",
              "name": "status",
              "value": "pending",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1720,
        380
      ],
      "id": "ab0f83ec-f576-421d-8e94-99388905e0a3",
      "name": "status"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1920,
        280
      ],
      "id": "f2c028c9-7a22-40d4-bf6a-bb4ccdfe19db",
      "name": "Merge status"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n#Pull full text\nres = items[0][\"json\"].get(\"analyzeResult\", {})\nfull_text = res.get(\"content\", \"\")\nlines = [ln.strip() for ln in full_text.splitlines() if ln.strip()]\n\n# 找 header 開始\nstart_idx = next(i for i, ln in enumerate(lines) if ln == \"項次\")\n\n# 找 header 結束：只要一整行都是數字，就當作流水號\nend_idx = next(\n    j\n    for j in range(start_idx + 1, len(lines))\n    if re.match(r\"^\\d+$\", lines[j])\n)\n\nheader_fields = lines[start_idx:end_idx]\n\n# 依 header_fields 長度切分資料 (slice subsequent lines into rows)\nchunk_size = len(header_fields)\nitems_list = []\nfor idx in range(end_idx, len(lines), chunk_size):\n    chunk = lines[idx: idx + chunk_size]\n    if len(chunk) < chunk_size:\n        break\n    row = dict(zip(header_fields, chunk))\n\n    # 安全取值\n    pid = row.get(\"品號\")\n    pname = row.get(\"品名\")\n    try:\n        qty = int(row.get(\"數量\", 0))\n    except:\n        qty = None\n    unit = row.get(\"單位\")\n\n    if pid:\n        items_list.append({\n            \"product_id\":   pid,\n            \"product_name\": pname,\n            \"quantity\":     qty,\n            \"unit\":         unit\n        })\n\nreturn [{ \"json\": { \"items\": items_list, \"status\": \"pending\" } }]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        260,
        -200
      ],
      "id": "470c9c31-1666-4611-980a-1e2718dd4a74",
      "name": "Parse Invoice Table"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "output_items = []\n\nfor idx, it in enumerate(items):\n    data = it.get('json', {})\n\n    # grab quantity (as string) and turn it into an int\n    qty_str = data.get(\"數量\", None)\n    try:\n        quantity = int(qty_str) if qty_str is not None else None\n    except ValueError:\n        quantity = qty_str\n\n    output_items.append({\n        \"matched_name\": data[\"document\"][\"pageContent\"],  # Pinecone match\n        \"original_input\": data[\"item\"],                   # original query\n        \"quantity\": quantity,\n        \"match_score\": float(data[\"score\"]),\n    })\n\n# return a single JSON object with an \"items\" array\nreturn output_items\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        20,
        420
      ],
      "id": "22a0a36c-8540-45e8-9eb4-996657ca7b87",
      "name": "revise merge output data with quantity"
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        -180,
        420
      ],
      "id": "569fa927-1802-4d8f-a067-9a8887a6be0f",
      "name": "merge output data with quantity"
    },
    {
      "parameters": {
        "mode": "combine",
        "advanced": true,
        "mergeByFields": {
          "values": [
            {
              "field1": "matched_name",
              "field2": "matched_name"
            }
          ]
        },
        "options": {
          "fuzzyCompare": true
        }
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1020,
        660
      ],
      "id": "6d9919b3-b7b9-4f33-91e8-871ee9c1deb5",
      "name": "Merge matched name and original input"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "original_input",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.1,
      "position": [
        1300,
        320
      ],
      "id": "0da4eaae-c46e-4a39-87f5-975a1a25db38",
      "name": "Merge with quantity"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# items is a list of dicts: [{'json': {...}}, {'json': {...}}, {'json': {...}}]\noutput = {}\n\nfor it in items:\n    j = it.get('json', {})\n    # customer info\n    if 'name' in j and 'date' in j:\n        output['customer_name'] = j['name']\n        output['order_date']    = j['date']\n    # line items array\n    if 'items' in j:\n        output['items'] = j['items']\n    # status\n    if 'status' in j:\n        output['status'] = j['status']\n\nreturn [{ 'json': output }]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2140,
        -20
      ],
      "id": "764006b6-e9f1-4e18-a056-f983a97a482f",
      "name": "reconstruct file structure to final format"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "# items is a list of dicts: [{'json': {...}}, {'json': {...}}, {'json': {...}}]\noutput = {}\n\nfor it in items:\n    j = it.get('json', {})\n    # customer info\n    if 'name' in j and 'date' in j:\n        output['customer_name'] = j['name']\n        output['order_date']    = j['date']\n    # line items array\n    if 'items' in j:\n        output['items'] = j['items']\n    # status\n    if 'status' in j:\n        output['status'] = j['status']\n\nreturn [{ 'json': output }]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        1160
      ],
      "id": "53b5570e-d35c-466d-93d7-936294f54d60",
      "name": "reconstruct file structure to final format1"
    }
  ],
  "pinData": {},
  "connections": {
    "Default Data Loader2": {
      "ai_document": [
        [
          {
            "node": "Build Pinecone Vector Store (only run on first time)",
            "type": "ai_document",
            "index": 0
          }
        ]
      ]
    },
    "Character Text Splitter": {
      "ai_textSplitter": [
        [
          {
            "node": "Default Data Loader2",
            "type": "ai_textSplitter",
            "index": 0
          }
        ]
      ]
    },
    "Pinecone Vector Store2": {
      "main": [
        [
          {
            "node": "merge output data with quantity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "品名,單位": {
      "main": [
        [
          {
            "node": "Build Pinecone Vector Store (only run on first time)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings OpenAI": {
      "ai_embedding": [
        [
          {
            "node": "Build Pinecone Vector Store (only run on first time)",
            "type": "ai_embedding",
            "index": 0
          },
          {
            "node": "Pinecone Vector Store2",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets product database": {
      "main": [
        [
          {
            "node": "品號,品名,單位",
            "type": "main",
            "index": 0
          },
          {
            "node": "品名,單位",
            "type": "main",
            "index": 0
          },
          {
            "node": "get 單位",
            "type": "main",
            "index": 0
          },
          {
            "node": "get 品號",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Respond to Webhook": {
      "main": [
        [
          {
            "node": "Customer name&date",
            "type": "main",
            "index": 0
          },
          {
            "node": "check attached file or not",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "google vision ai4": {
      "main": [
        [
          {
            "node": "If image content is not empty",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "base64": {
      "main": [
        [
          {
            "node": "google vision ai4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "test data": {
      "main": [
        []
      ]
    },
    "base": {
      "main": [
        [
          {
            "node": "Azure Post request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check If file is pdf": {
      "main": [
        [
          {
            "node": "base",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "base64",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Setting up database": {
      "main": [
        [
          {
            "node": "test data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Google Sheets product database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Pinecone Vector Store (only run on first time)": {
      "main": [
        [
          {
            "node": "vector database init end",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get 單位": {
      "main": [
        [
          {
            "node": "單位",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "get 品號": {
      "main": [
        [
          {
            "node": "品號",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "品號": {
      "main": [
        []
      ]
    },
    "單位": {
      "main": [
        []
      ]
    },
    "Customer name&date": {
      "main": [
        [
          {
            "node": "Merge customer and items1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge customer and items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Image final output": {
      "main": [
        []
      ]
    },
    "Extracts OCR text": {
      "main": [
        [
          {
            "node": "extract product fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "extract product fields": {
      "main": [
        [
          {
            "node": "Pinecone Vector Store2",
            "type": "main",
            "index": 0
          },
          {
            "node": "merge output data with quantity",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "If score less than 70% occur human confirm1": {
      "main": [
        [
          {
            "node": "Google Sheets2",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge matched name and original input",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Send to human",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Sheets2": {
      "main": [
        [
          {
            "node": "remove duplicates",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "remove duplicates": {
      "main": [
        [
          {
            "node": "reconstruct file structure",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reconstruct file structure": {
      "main": [
        [
          {
            "node": "Merge matched name and original input",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reconstruct file structure1": {
      "main": [
        [
          {
            "node": "Merge with quantity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "into items list": {
      "main": [
        [
          {
            "node": "Merge customer and items1",
            "type": "main",
            "index": 1
          },
          {
            "node": "status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "wait for succeeded status": {
      "main": [
        [
          {
            "node": "Wait 5 sec if azure hasn't finished",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Parse Invoice Table",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait 5 sec if azure hasn't finished": {
      "main": [
        [
          {
            "node": "Azure Get request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure Get request1": {
      "main": [
        [
          {
            "node": "wait for succeeded status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Azure Post request": {
      "main": [
        [
          {
            "node": "Azure Get request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send to human": {
      "main": [
        []
      ]
    },
    "check attached file or not": {
      "main": [
        [
          {
            "node": "Check If file is pdf",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send empty file message to human",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If image content is not empty": {
      "main": [
        [
          {
            "node": "Extracts OCR text",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Send empty content message to human",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge customer and items": {
      "main": [
        [
          {
            "node": "pdf final output",
            "type": "main",
            "index": 0
          },
          {
            "node": "reconstruct file structure to final format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge customer and items1": {
      "main": [
        [
          {
            "node": "Merge status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "status": {
      "main": [
        [
          {
            "node": "Merge status",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge status": {
      "main": [
        [
          {
            "node": "reconstruct file structure to final format",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Invoice Table": {
      "main": [
        [
          {
            "node": "Merge customer and items",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "revise merge output data with quantity": {
      "main": [
        [
          {
            "node": "If score less than 70% occur human confirm1",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge with quantity",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "merge output data with quantity": {
      "main": [
        [
          {
            "node": "revise merge output data with quantity",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge matched name and original input": {
      "main": [
        [
          {
            "node": "reconstruct file structure1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge with quantity": {
      "main": [
        [
          {
            "node": "into items list",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "reconstruct file structure to final format": {
      "main": [
        [
          {
            "node": "Image final output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b160f854-dac4-4cad-8ccf-22abec042216",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "1f7d48ba6b0afd5118408cdc828e329f7610fcc04c4c4e38ab671ab4e6d41afe"
  },
  "id": "FvU0Sb2DLhE50U5q",
  "tags": []
}